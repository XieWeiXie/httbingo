// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/v1/api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HttpBinServiceClient is the client API for HttpBinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HttpBinServiceClient interface {
	HttpMethodGet(ctx context.Context, in *HttpMethodGetReq, opts ...grpc.CallOption) (*ResponseReply, error)
	HttpMethodPut(ctx context.Context, in *HttpMethodPutReq, opts ...grpc.CallOption) (*ResponseReply, error)
	HttpMethodDelete(ctx context.Context, in *HttpMethodDeleteReq, opts ...grpc.CallOption) (*ResponseReply, error)
	HttpMethodPost(ctx context.Context, in *HttpMethodPostReq, opts ...grpc.CallOption) (*ResponseReply, error)
	StatusCode(ctx context.Context, in *StatusCodeReq, opts ...grpc.CallOption) (*ResponseReply, error)
	Headers(ctx context.Context, in *HeadersReq, opts ...grpc.CallOption) (*ResponseReply, error)
	IP(ctx context.Context, in *IPReq, opts ...grpc.CallOption) (*ResponseReply, error)
	UserAgent(ctx context.Context, in *UserAgentReq, opts ...grpc.CallOption) (*ResponseReply, error)
}

type httpBinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHttpBinServiceClient(cc grpc.ClientConnInterface) HttpBinServiceClient {
	return &httpBinServiceClient{cc}
}

func (c *httpBinServiceClient) HttpMethodGet(ctx context.Context, in *HttpMethodGetReq, opts ...grpc.CallOption) (*ResponseReply, error) {
	out := new(ResponseReply)
	err := c.cc.Invoke(ctx, "/httpbingo.v1.HttpBinService/HttpMethodGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpBinServiceClient) HttpMethodPut(ctx context.Context, in *HttpMethodPutReq, opts ...grpc.CallOption) (*ResponseReply, error) {
	out := new(ResponseReply)
	err := c.cc.Invoke(ctx, "/httpbingo.v1.HttpBinService/HttpMethodPut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpBinServiceClient) HttpMethodDelete(ctx context.Context, in *HttpMethodDeleteReq, opts ...grpc.CallOption) (*ResponseReply, error) {
	out := new(ResponseReply)
	err := c.cc.Invoke(ctx, "/httpbingo.v1.HttpBinService/HttpMethodDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpBinServiceClient) HttpMethodPost(ctx context.Context, in *HttpMethodPostReq, opts ...grpc.CallOption) (*ResponseReply, error) {
	out := new(ResponseReply)
	err := c.cc.Invoke(ctx, "/httpbingo.v1.HttpBinService/HttpMethodPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpBinServiceClient) StatusCode(ctx context.Context, in *StatusCodeReq, opts ...grpc.CallOption) (*ResponseReply, error) {
	out := new(ResponseReply)
	err := c.cc.Invoke(ctx, "/httpbingo.v1.HttpBinService/StatusCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpBinServiceClient) Headers(ctx context.Context, in *HeadersReq, opts ...grpc.CallOption) (*ResponseReply, error) {
	out := new(ResponseReply)
	err := c.cc.Invoke(ctx, "/httpbingo.v1.HttpBinService/Headers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpBinServiceClient) IP(ctx context.Context, in *IPReq, opts ...grpc.CallOption) (*ResponseReply, error) {
	out := new(ResponseReply)
	err := c.cc.Invoke(ctx, "/httpbingo.v1.HttpBinService/IP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpBinServiceClient) UserAgent(ctx context.Context, in *UserAgentReq, opts ...grpc.CallOption) (*ResponseReply, error) {
	out := new(ResponseReply)
	err := c.cc.Invoke(ctx, "/httpbingo.v1.HttpBinService/UserAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HttpBinServiceServer is the server API for HttpBinService service.
// All implementations should embed UnimplementedHttpBinServiceServer
// for forward compatibility
type HttpBinServiceServer interface {
	HttpMethodGet(context.Context, *HttpMethodGetReq) (*ResponseReply, error)
	HttpMethodPut(context.Context, *HttpMethodPutReq) (*ResponseReply, error)
	HttpMethodDelete(context.Context, *HttpMethodDeleteReq) (*ResponseReply, error)
	HttpMethodPost(context.Context, *HttpMethodPostReq) (*ResponseReply, error)
	StatusCode(context.Context, *StatusCodeReq) (*ResponseReply, error)
	Headers(context.Context, *HeadersReq) (*ResponseReply, error)
	IP(context.Context, *IPReq) (*ResponseReply, error)
	UserAgent(context.Context, *UserAgentReq) (*ResponseReply, error)
}

// UnimplementedHttpBinServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHttpBinServiceServer struct {
}

func (UnimplementedHttpBinServiceServer) HttpMethodGet(context.Context, *HttpMethodGetReq) (*ResponseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HttpMethodGet not implemented")
}
func (UnimplementedHttpBinServiceServer) HttpMethodPut(context.Context, *HttpMethodPutReq) (*ResponseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HttpMethodPut not implemented")
}
func (UnimplementedHttpBinServiceServer) HttpMethodDelete(context.Context, *HttpMethodDeleteReq) (*ResponseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HttpMethodDelete not implemented")
}
func (UnimplementedHttpBinServiceServer) HttpMethodPost(context.Context, *HttpMethodPostReq) (*ResponseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HttpMethodPost not implemented")
}
func (UnimplementedHttpBinServiceServer) StatusCode(context.Context, *StatusCodeReq) (*ResponseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusCode not implemented")
}
func (UnimplementedHttpBinServiceServer) Headers(context.Context, *HeadersReq) (*ResponseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Headers not implemented")
}
func (UnimplementedHttpBinServiceServer) IP(context.Context, *IPReq) (*ResponseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IP not implemented")
}
func (UnimplementedHttpBinServiceServer) UserAgent(context.Context, *UserAgentReq) (*ResponseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAgent not implemented")
}

// UnsafeHttpBinServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HttpBinServiceServer will
// result in compilation errors.
type UnsafeHttpBinServiceServer interface {
	mustEmbedUnimplementedHttpBinServiceServer()
}

func RegisterHttpBinServiceServer(s grpc.ServiceRegistrar, srv HttpBinServiceServer) {
	s.RegisterService(&HttpBinService_ServiceDesc, srv)
}

func _HttpBinService_HttpMethodGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HttpMethodGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpBinServiceServer).HttpMethodGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/httpbingo.v1.HttpBinService/HttpMethodGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpBinServiceServer).HttpMethodGet(ctx, req.(*HttpMethodGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpBinService_HttpMethodPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HttpMethodPutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpBinServiceServer).HttpMethodPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/httpbingo.v1.HttpBinService/HttpMethodPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpBinServiceServer).HttpMethodPut(ctx, req.(*HttpMethodPutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpBinService_HttpMethodDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HttpMethodDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpBinServiceServer).HttpMethodDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/httpbingo.v1.HttpBinService/HttpMethodDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpBinServiceServer).HttpMethodDelete(ctx, req.(*HttpMethodDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpBinService_HttpMethodPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HttpMethodPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpBinServiceServer).HttpMethodPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/httpbingo.v1.HttpBinService/HttpMethodPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpBinServiceServer).HttpMethodPost(ctx, req.(*HttpMethodPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpBinService_StatusCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpBinServiceServer).StatusCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/httpbingo.v1.HttpBinService/StatusCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpBinServiceServer).StatusCode(ctx, req.(*StatusCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpBinService_Headers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeadersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpBinServiceServer).Headers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/httpbingo.v1.HttpBinService/Headers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpBinServiceServer).Headers(ctx, req.(*HeadersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpBinService_IP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpBinServiceServer).IP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/httpbingo.v1.HttpBinService/IP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpBinServiceServer).IP(ctx, req.(*IPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpBinService_UserAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAgentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpBinServiceServer).UserAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/httpbingo.v1.HttpBinService/UserAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpBinServiceServer).UserAgent(ctx, req.(*UserAgentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HttpBinService_ServiceDesc is the grpc.ServiceDesc for HttpBinService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HttpBinService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "httpbingo.v1.HttpBinService",
	HandlerType: (*HttpBinServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HttpMethodGet",
			Handler:    _HttpBinService_HttpMethodGet_Handler,
		},
		{
			MethodName: "HttpMethodPut",
			Handler:    _HttpBinService_HttpMethodPut_Handler,
		},
		{
			MethodName: "HttpMethodDelete",
			Handler:    _HttpBinService_HttpMethodDelete_Handler,
		},
		{
			MethodName: "HttpMethodPost",
			Handler:    _HttpBinService_HttpMethodPost_Handler,
		},
		{
			MethodName: "StatusCode",
			Handler:    _HttpBinService_StatusCode_Handler,
		},
		{
			MethodName: "Headers",
			Handler:    _HttpBinService_Headers_Handler,
		},
		{
			MethodName: "IP",
			Handler:    _HttpBinService_IP_Handler,
		},
		{
			MethodName: "UserAgent",
			Handler:    _HttpBinService_UserAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/api.proto",
}
